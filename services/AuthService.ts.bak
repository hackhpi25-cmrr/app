import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';

// Network configuration
type NetworkConfig = {
  // Default API URL
  apiUrl: string;
  // If true, use port forwarding (localhost)
  usePortForwarding: boolean;
};

// Configure the API URL based on where the app is running
// When using USB debugging with a physical device, usePortForwarding should be true
// This will use localhost:8000 which is forwarded via ADB to your computer
const CONFIG: NetworkConfig = {
  apiUrl: 'http://10.60.60.71:8000',
  usePortForwarding: true
};

let API_URL = CONFIG.apiUrl;

// For development mode
if (__DEV__) {
  if (CONFIG.usePortForwarding && Platform.OS === 'android') {
    // When using adb reverse tcp:8000 tcp:8000, use localhost
    API_URL = 'http://localhost:8000';
  } else if (Platform.OS === 'ios' && !CONFIG.usePortForwarding) {
    // For iOS simulator without port forwarding
    API_URL = 'http://localhost:8000';
  } else if (Platform.OS === 'android' && !CONFIG.usePortForwarding) {
    // For Android emulator or direct connection without port forwarding
    API_URL = CONFIG.apiUrl;
  } else {
    console.log('Using default config:', API_URL);
  }
}


// Add debug function for network calls
// Export the API_URL for use in other files
export { API_URL };

export interface User {
  username: string;
  email: string;
  first_name: string;
  last_name: string;
}

export interface AuthTokens {
  access: string;
  refresh: string;
}

export interface RegisterData {
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  password: string;
}

export interface LoginData {
  username: string;
  password: string;
}

export class AuthService {
  static async register(data: RegisterData): Promise<void> {
    try {
      console.log('Registering user:', data);
      console.log('API URL:', `${API_URL}/register`);
      const response = await fetch(`${API_URL}/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Registration failed');
      }
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    }
  }

  static async login(data: LoginData): Promise<AuthTokens> {
    try {
      const response = await fetch(`${API_URL}/api/token/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Login failed');
      }

      const tokens = await response.json();
      
      // Store the tokens
      await this.storeTokens(tokens);
      
      return tokens;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  }

  static async logout(): Promise<void> {
    await AsyncStorage.removeItem('auth_tokens');
  }

  static async storeTokens(tokens: AuthTokens): Promise<void> {
    await AsyncStorage.setItem('auth_tokens', JSON.stringify(tokens));
  }

  static async getTokens(): Promise<AuthTokens | null> {
    const tokens = await AsyncStorage.getItem('auth_tokens');
    return tokens ? JSON.parse(tokens) : null;
  }

  static async isAuthenticated(): Promise<boolean> {
    const tokens = await this.getTokens();
    return !!tokens;
  }

  static async getAuthenticatedRequest(url: string, method: string = 'GET', body?: any): Promise<Response> {
    const tokens = await this.getTokens();
    
    if (!tokens) {
      throw new Error('Not authenticated');
    }

    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${tokens.access}`,
    };

    const options: RequestInit = {
      method,
      headers,
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    return fetch(url, options);
  }

  static async checkAuth(): Promise<boolean> {
    try {
      const response = await this.getAuthenticatedRequest(`${API_URL}/amiauth`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }
} 